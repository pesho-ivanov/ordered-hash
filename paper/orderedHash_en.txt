Ordered hash: optimizing a search tree by a hash table

** Abstract

An integration of a hash table and a balanced search tree is proposed. The new data structure, called an ordered hash supports constant-time finds and erases and logarithmic-time insert. The open source C++ implementations are STL-style which makes the existing applications extremely easy to get optimized by simply changing the underlaying class. The ordered hash is compared to the heavily used map and unordered_map/hash_map from STL.


** Introduction
Съвременните информационни дейности изискват използването на компютърната техника не просто за съхранение на големи обеми  информация, а преди всичко за организирането на тази информация в логичен ред, позволяващ бърз достъп до нея по определени критерии. Процесът на подреждане на обекти в определен ред е известен като сортиране. В този смисъл сортирането е универсална, основна дейност, чиято цел е бързото откриване на конкретен обект или получаване на разрез от данни, обединени от някакъв критерий. Това свързва по естествен начин процесите сортиране и търсене. Възможно е сортирането на голям брой елементи да отнеме значителни изчислителни ресурси и в този смисъл се поставя въпросът за ефективността от неговото използване при търсене. Алгоритъмът за двоично търсене  в сортирана редица има логаритмична сложност. От друга страна търсенето е процес, за който съществува алгоритъм с константна сложност (търсене в хеш-таблица). Търсенето чрез хеширане предполага използване на стратегии, които се различават съществено от тези при сортиране и в този смисъл въпросът за интегрирането на хеширане и сортиране не е тривиален. За повечето езици за програмиране са достъпни структури от данни, организирани на базата на хеш таблици и балансирани дървета за търсене. Популярната библиотека STL, за C++ също предоставя структури от данни, чиято организация е базирана както на хеш-таблици (unordered_map), така и на балансирани дървета за търсене (map). 

Nowadays information technologies demand not only on storaging big data but also logically organazing the information enabling fast access. Sorting, or ordering, is one of the most heavily used ways of organizing information which allows search operation to be performed fast -- typically in logarithmic-time of the number of stored elements. On the other hand hashing is a technique which allows constant-time searches but doesn not maintain the elements ordered. Our aim is to join the ordered and hashed approaches to obtain a data structure providing constant-time search operations while keeping the elements ordered for eventual traversal. Such a structure can be used for optimizing the execution time of existing applications performing many search queries in a dynamically ordered structure.

Sorting could be done by comparison the sorted elements or by other means (radix sort, counting sort, etc.). This paper consideres only sorting by comparison.

Идеята на настоящата разработка е да предложи различни подходи за интегриране на процесите подреждане и търсене, за получаване на ефективно работеща структура, в която търсенето и изтриването е с константна сложност, а вмъкването - с логаритмична. 
Като резултат се предлагат две структури от данни, реализиращи описаните подходи и организирани в STL style. Те използват идентичен програмен интерфейс с останалите STL структури и могат да се използват по същия начин. За реализациите им са използвани библиотеките STL и Boost. Предоставянето на тези структури като отворен код, допълва библиотеката STL с още полезни инструменти за организация на данни.

** Ordered hash data structure

  For now on we will call a key a specific hashable and comparable object and we will call a data any specific object.

  The introduced data structure Ordered hash consists of a balanced search tree [???] T and a hash map H [???]. The main aim of integrating a hash table to a search tree is to speed-up the find operation while dynamically maintaining the order of the elements in the tree. Each element of T contains a key field (by which it is ordered) and a data field. H maps keys to address pointers to T elements.

The main operations of the introduced ordered_hash work as follows:
 -- insert(key, value):
    1) inserts the (key, value) pair into T as an element pointed by p,
    2) inserts the (key, p) pair into H.
 -- find(key):
    1) searches for key in H
    2) if key is found in H then returns a pointer to key in T
 -- erase(key):
    1) erases key from H
    2) erases key from T
 -- next(T-pointer) and prev(T-pointer)
    1) returns the next/prev pointer

** Implementation details
  The proposed C++ class ordered_hash is fully STL-consistent. It has the same interface as STL map so as to be easily interchanged in existing projects. The class ordered_hash is templated by key_type and data_type. The type ordered_t of T is defined by the STL map<key_type, data_type>. The type unordered_t of H is defined by the STL unordered_map<key_type, ordered_t::iterator>. (Note that the map specification guarantees that elements do not change their address.)

  The overhead memory usage of this implementation against map is O(N*sizeof(key)). It is lowered to Theta(N) by replacing H: key->iterator to H: key_hash->iterator.

  The described ordered_hash_map class can be extended to analogous ordered_hash_multimap, ordered_hash_set and ordered_hash_multiset.

** Complexities
  All the operations on map are available on ordered_hash with the same time and memory complexities except the find operation which runs in O(1). Note that if the number of elements to be inserted is not known ahead, the complexities of insertion and erasion in hash tables are only amortized O(1) over multiple calls (because of hash table resizing).
  The insertion into ordered_hash consists of insertion into a map for O(logN) and insertion into a hash for O(1).
  The transitions to the next and to the previous element in the ordered set are done traversing the tree. The maximum edge-distance between sequential elements is at most O(logN) but amortized over iterating the whole tree the average distance is O(1) (because every edge is traversed exactly twice -- downwards and upwards).

                 map    ordered_hash  ordered_hash*  hash/unordered_map
      insert:   logN        logN          logN*              1
       erase:   logN        logN           1                 1
        find:   logN         1             1                 1
   next/prev:   logN        logN          logN*           n/a or N
  all sorted:     N          N             N*           n/a or NlogN

** The erase optimization
  Instead of erasing an element from both the hash and the tree, it can be only erased from the hash. Searching for an element will be unsuccessful if the element is not found in the hash. This optimizes the erase operation to O(1). Some additional work not increasing the complexity is to be done when traversing the tree: every element has to be checked on whether it was not erased from the hash. Another implication of not physically erasing elements is that the iteration time is no more dependent on the number of elements N logically contained in the structure but on the number of elements N* ever inserted. Ordered_hash with the erase optimization is referred with a star.

** The next/prev optimization
  It is also possible to lower the complexity of the transitions to O(1) by maintaining two additional pointers (for the next and the previous element) for every element in the tree. This modification was not implemented in the current STL probably because the expected number of operations for a transition is constant either way.

** Experimental results
   -- toy data
  table with times 

  -- contest problems data

set: http://iskren.info/info/noi/2005/k3/src/k15/burn.cpp
set: http://iskren.info/info/lish_07/iskren/cuboid.cpp
set: http://iskren.info/info/BaOI/2002/tr.cpp
map with erase: http://iskren.info/info/ceoi/2000/falling.cpp
map with cmp without erase: http://iskren.info/info/noi/2005/k3/src/k2/cut.cpp

ivan gradina: some speed-up
iskren titanic: 

  table with times 

   * ordered_hash finds are much quicker than map finds
   * ordered_hash finds are quicker than hash finds!
   * ordered_hash_faster's find is slower than ordered_hash's
   * ordered_hash_faster has O(1) erase but finds and increments are slower because of the filter_iterator
